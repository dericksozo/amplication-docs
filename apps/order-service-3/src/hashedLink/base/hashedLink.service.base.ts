/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  HashedLink as PrismaHashedLink,
  EventType as PrismaEventType,
} from "@prisma/client";

export class HashedLinkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.HashedLinkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.hashedLink.count(args);
  }

  async hashedLinks<T extends Prisma.HashedLinkFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.HashedLinkFindManyArgs>
  ): Promise<PrismaHashedLink[]> {
    return this.prisma.hashedLink.findMany<Prisma.HashedLinkFindManyArgs>(args);
  }
  async hashedLink<T extends Prisma.HashedLinkFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.HashedLinkFindUniqueArgs>
  ): Promise<PrismaHashedLink | null> {
    return this.prisma.hashedLink.findUnique(args);
  }
  async createHashedLink<T extends Prisma.HashedLinkCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HashedLinkCreateArgs>
  ): Promise<PrismaHashedLink> {
    return this.prisma.hashedLink.create<T>(args);
  }
  async updateHashedLink<T extends Prisma.HashedLinkUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HashedLinkUpdateArgs>
  ): Promise<PrismaHashedLink> {
    return this.prisma.hashedLink.update<T>(args);
  }
  async deleteHashedLink<T extends Prisma.HashedLinkDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.HashedLinkDeleteArgs>
  ): Promise<PrismaHashedLink> {
    return this.prisma.hashedLink.delete(args);
  }

  async getEventType(parentId: number): Promise<PrismaEventType | null> {
    return this.prisma.hashedLink
      .findUnique({
        where: { id: parentId },
      })
      .eventType();
  }
}
