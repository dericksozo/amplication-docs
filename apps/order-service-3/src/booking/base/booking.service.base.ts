/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Booking as PrismaBooking,
  BookingReference as PrismaBookingReference,
  Attendee as PrismaAttendee,
  Payment as PrismaPayment,
  WorkflowReminder as PrismaWorkflowReminder,
  User as PrismaUser,
  EventType as PrismaEventType,
  DestinationCalendar as PrismaDestinationCalendar,
  DailyEventReference as PrismaDailyEventReference,
} from "@prisma/client";

export class BookingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BookingCountArgs, "select">): Promise<number> {
    return this.prisma.booking.count(args);
  }

  async bookings<T extends Prisma.BookingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookingFindManyArgs>
  ): Promise<PrismaBooking[]> {
    return this.prisma.booking.findMany<Prisma.BookingFindManyArgs>(args);
  }
  async booking<T extends Prisma.BookingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookingFindUniqueArgs>
  ): Promise<PrismaBooking | null> {
    return this.prisma.booking.findUnique(args);
  }
  async createBooking<T extends Prisma.BookingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookingCreateArgs>
  ): Promise<PrismaBooking> {
    return this.prisma.booking.create<T>(args);
  }
  async updateBooking<T extends Prisma.BookingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookingUpdateArgs>
  ): Promise<PrismaBooking> {
    return this.prisma.booking.update<T>(args);
  }
  async deleteBooking<T extends Prisma.BookingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookingDeleteArgs>
  ): Promise<PrismaBooking> {
    return this.prisma.booking.delete(args);
  }

  async findReferences(
    parentId: number,
    args: Prisma.BookingReferenceFindManyArgs
  ): Promise<PrismaBookingReference[]> {
    return this.prisma.booking
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .references(args);
  }

  async findAttendees(
    parentId: number,
    args: Prisma.AttendeeFindManyArgs
  ): Promise<PrismaAttendee[]> {
    return this.prisma.booking
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .attendees(args);
  }

  async findPayment(
    parentId: number,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.booking
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payment(args);
  }

  async findWorkflowReminders(
    parentId: number,
    args: Prisma.WorkflowReminderFindManyArgs
  ): Promise<PrismaWorkflowReminder[]> {
    return this.prisma.booking
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workflowReminders(args);
  }

  async getUser(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.booking
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getEventType(parentId: number): Promise<PrismaEventType | null> {
    return this.prisma.booking
      .findUnique({
        where: { id: parentId },
      })
      .eventType();
  }

  async getDestinationCalendar(
    parentId: number
  ): Promise<PrismaDestinationCalendar | null> {
    return this.prisma.booking
      .findUnique({
        where: { id: parentId },
      })
      .destinationCalendar();
  }

  async getDailyRef(
    parentId: number
  ): Promise<PrismaDailyEventReference | null> {
    return this.prisma.booking
      .findUnique({
        where: { id: parentId },
      })
      .dailyRef();
  }
}
