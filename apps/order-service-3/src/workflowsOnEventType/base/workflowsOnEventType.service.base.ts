/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WorkflowsOnEventType as PrismaWorkflowsOnEventType,
  Workflow as PrismaWorkflow,
  EventType as PrismaEventType,
} from "@prisma/client";

export class WorkflowsOnEventTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkflowsOnEventTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workflowsOnEventType.count(args);
  }

  async workflowsOnEventTypes<
    T extends Prisma.WorkflowsOnEventTypeFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WorkflowsOnEventTypeFindManyArgs>
  ): Promise<PrismaWorkflowsOnEventType[]> {
    return this.prisma.workflowsOnEventType.findMany<Prisma.WorkflowsOnEventTypeFindManyArgs>(
      args
    );
  }
  async workflowsOnEventType<
    T extends Prisma.WorkflowsOnEventTypeFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WorkflowsOnEventTypeFindUniqueArgs>
  ): Promise<PrismaWorkflowsOnEventType | null> {
    return this.prisma.workflowsOnEventType.findUnique(args);
  }
  async createWorkflowsOnEventType<
    T extends Prisma.WorkflowsOnEventTypeCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WorkflowsOnEventTypeCreateArgs>
  ): Promise<PrismaWorkflowsOnEventType> {
    return this.prisma.workflowsOnEventType.create<T>(args);
  }
  async updateWorkflowsOnEventType<
    T extends Prisma.WorkflowsOnEventTypeUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WorkflowsOnEventTypeUpdateArgs>
  ): Promise<PrismaWorkflowsOnEventType> {
    return this.prisma.workflowsOnEventType.update<T>(args);
  }
  async deleteWorkflowsOnEventType<
    T extends Prisma.WorkflowsOnEventTypeDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WorkflowsOnEventTypeDeleteArgs>
  ): Promise<PrismaWorkflowsOnEventType> {
    return this.prisma.workflowsOnEventType.delete(args);
  }

  async getWorkflow(parentId: number): Promise<PrismaWorkflow | null> {
    return this.prisma.workflowsOnEventType
      .findUnique({
        where: { id: parentId },
      })
      .workflow();
  }

  async getEventType(parentId: number): Promise<PrismaEventType | null> {
    return this.prisma.workflowsOnEventType
      .findUnique({
        where: { id: parentId },
      })
      .eventType();
  }
}
