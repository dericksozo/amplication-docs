/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BookingReference as PrismaBookingReference,
  Booking as PrismaBooking,
} from "@prisma/client";

export class BookingReferenceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BookingReferenceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bookingReference.count(args);
  }

  async bookingReferences<T extends Prisma.BookingReferenceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookingReferenceFindManyArgs>
  ): Promise<PrismaBookingReference[]> {
    return this.prisma.bookingReference.findMany<Prisma.BookingReferenceFindManyArgs>(
      args
    );
  }
  async bookingReference<T extends Prisma.BookingReferenceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookingReferenceFindUniqueArgs>
  ): Promise<PrismaBookingReference | null> {
    return this.prisma.bookingReference.findUnique(args);
  }
  async createBookingReference<T extends Prisma.BookingReferenceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookingReferenceCreateArgs>
  ): Promise<PrismaBookingReference> {
    return this.prisma.bookingReference.create<T>(args);
  }
  async updateBookingReference<T extends Prisma.BookingReferenceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookingReferenceUpdateArgs>
  ): Promise<PrismaBookingReference> {
    return this.prisma.bookingReference.update<T>(args);
  }
  async deleteBookingReference<T extends Prisma.BookingReferenceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BookingReferenceDeleteArgs>
  ): Promise<PrismaBookingReference> {
    return this.prisma.bookingReference.delete(args);
  }

  async getBooking(parentId: number): Promise<PrismaBooking | null> {
    return this.prisma.bookingReference
      .findUnique({
        where: { id: parentId },
      })
      .booking();
  }
}
